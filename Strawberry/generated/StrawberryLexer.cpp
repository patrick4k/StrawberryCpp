
// Generated from /Users/patrickkennedy/Desktop/antlr4/StrawberryCpp/Strawberry/StrawberryLexer.g4 by ANTLR 4.12.0


#include "StrawberryLexer.h"


using namespace antlr4;

using namespace antlrcpptest;


using namespace antlr4;

namespace {

struct StrawberryLexerStaticData final {
  StrawberryLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  StrawberryLexerStaticData(const StrawberryLexerStaticData&) = delete;
  StrawberryLexerStaticData(StrawberryLexerStaticData&&) = delete;
  StrawberryLexerStaticData& operator=(const StrawberryLexerStaticData&) = delete;
  StrawberryLexerStaticData& operator=(StrawberryLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag strawberrylexerLexerOnceFlag;
StrawberryLexerStaticData *strawberrylexerLexerStaticData = nullptr;

void strawberrylexerLexerInitialize() {
  assert(strawberrylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<StrawberryLexerStaticData>(
    std::vector<std::string>{
      "Fn", "Decl", "If", "Unless", "Else", "While", "Until", "For", "Return", 
      "Break", "Next", "Last", "Once", "MatchArrow", "RegWord", "RegDigit", 
      "RegSpace", "RegNewline", "RegFSlash", "RegReturnAll", "Id", "DefId", 
      "Number", "Digit", "Word", "Letter", "UcLetter", "LcLetter", "True", 
      "False", "Null", "DefOr", "Sarrow", "Darrow", "LRarrow", "RLarrow", 
      "Dot2", "Dot3", "As", "PlusEq", "MinEq", "MultEq", "DivEq", "ModEq", 
      "PowEq", "Increm", "Decrem", "Lbrack", "Rbrack", "Lbrace", "Rbrace", 
      "Lpar", "Rpar", "Pow", "Star", "Bslash", "Mod", "Plus", "Min", "Eq", 
      "BoolEq", "BoolNeq", "Gt", "GtEq", "Lt", "LtEq", "And", "Or", "Uscore", 
      "AndSign", "Doll", "DollLit", "Hash", "At", "ExPoint", "Qmark", "Colon", 
      "Semi", "Fslash", "Bar", "Dquote", "Squote", "Com", "Dot", "Squig", 
      "Btick", "Ignore", "WS", "Comment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'fn'", "'let'", "'if'", "'unless'", "'else'", "'while'", "'until'", 
      "'for'", "'return'", "'break'", "'next'", "'last'", "'once'", "'~>'", 
      "'\\w'", "'\\d'", "'\\s'", "'\\n'", "'\\/'", "'return all'", "", "", 
      "", "", "", "", "", "", "'true'", "'false'", "'null'", "'\\\\'", "'->'", 
      "'=>'", "'>>'", "'<<'", "'..'", "'...'", "'as'", "'+='", "'-='", "'*='", 
      "'/='", "'%='", "'^='", "'++'", "'--'", "'['", "']'", "'{'", "'}'", 
      "'('", "')'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'=='", 
      "'!='", "'>'", "'>='", "'<'", "'<='", "'&&'", "'||'", "'_'", "'&'", 
      "'$'", "'\\$'", "'#'", "'@'", "'!'", "'\\u003F'", "':'", "';'", "'\\'", 
      "'|'", "'\"'", "'''", "','", "'.'", "'~'", "'`'"
    },
    std::vector<std::string>{
      "", "Fn", "Decl", "If", "Unless", "Else", "While", "Until", "For", 
      "Return", "Break", "Next", "Last", "Once", "MatchArrow", "RegWord", 
      "RegDigit", "RegSpace", "RegNewline", "RegFSlash", "RegReturnAll", 
      "Id", "DefId", "Number", "Digit", "Word", "Letter", "UcLetter", "LcLetter", 
      "True", "False", "Null", "DefOr", "Sarrow", "Darrow", "LRarrow", "RLarrow", 
      "Dot2", "Dot3", "As", "PlusEq", "MinEq", "MultEq", "DivEq", "ModEq", 
      "PowEq", "Increm", "Decrem", "Lbrack", "Rbrack", "Lbrace", "Rbrace", 
      "Lpar", "Rpar", "Pow", "Star", "Bslash", "Mod", "Plus", "Min", "Eq", 
      "BoolEq", "BoolNeq", "Gt", "GtEq", "Lt", "LtEq", "And", "Or", "Uscore", 
      "AndSign", "Doll", "DollLit", "Hash", "At", "ExPoint", "Qmark", "Colon", 
      "Semi", "Fslash", "Bar", "Dquote", "Squote", "Com", "Dot", "Squig", 
      "Btick", "Ignore", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,88,498,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,1,0,1,0,1,0,1,1,1,1,1,1,
  	1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,
  	5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,
  	1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
  	1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
  	5,20,279,8,20,10,20,12,20,282,9,20,1,21,1,21,3,21,286,8,21,1,22,4,22,
  	289,8,22,11,22,12,22,290,1,22,1,22,4,22,295,8,22,11,22,12,22,296,3,22,
  	299,8,22,1,23,1,23,1,24,4,24,304,8,24,11,24,12,24,305,1,25,1,25,3,25,
  	310,8,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,
  	1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,
  	1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,
  	1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,
  	1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,
  	1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,
  	1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,65,1,65,
  	1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,
  	1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,
  	1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,
  	1,85,1,85,1,86,1,86,3,86,468,8,86,1,86,1,86,1,87,4,87,473,8,87,11,87,
  	12,87,474,1,88,1,88,1,88,1,88,5,88,481,8,88,10,88,12,88,484,9,88,1,88,
  	1,88,1,88,1,88,5,88,490,8,88,10,88,12,88,493,9,88,1,88,1,88,3,88,497,
  	8,88,1,491,0,89,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
  	12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
  	47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
  	35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
  	93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
  	57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,
  	67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,
  	77,155,78,157,79,159,80,161,81,163,82,165,83,167,84,169,85,171,86,173,
  	87,175,88,177,0,1,0,5,1,0,48,57,1,0,65,90,1,0,97,122,3,0,9,10,13,13,32,
  	32,2,0,10,10,13,13,510,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
  	0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
  	1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
  	0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
  	0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
  	1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
  	0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
  	0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
  	1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
  	0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,
  	0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,
  	0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,
  	0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,
  	0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,
  	0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,
  	0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,
  	0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,
  	0,0,175,1,0,0,0,1,179,1,0,0,0,3,182,1,0,0,0,5,186,1,0,0,0,7,189,1,0,0,
  	0,9,196,1,0,0,0,11,201,1,0,0,0,13,207,1,0,0,0,15,213,1,0,0,0,17,217,1,
  	0,0,0,19,224,1,0,0,0,21,230,1,0,0,0,23,235,1,0,0,0,25,240,1,0,0,0,27,
  	245,1,0,0,0,29,248,1,0,0,0,31,251,1,0,0,0,33,254,1,0,0,0,35,257,1,0,0,
  	0,37,260,1,0,0,0,39,263,1,0,0,0,41,274,1,0,0,0,43,283,1,0,0,0,45,288,
  	1,0,0,0,47,300,1,0,0,0,49,303,1,0,0,0,51,309,1,0,0,0,53,311,1,0,0,0,55,
  	313,1,0,0,0,57,315,1,0,0,0,59,320,1,0,0,0,61,326,1,0,0,0,63,331,1,0,0,
  	0,65,334,1,0,0,0,67,337,1,0,0,0,69,340,1,0,0,0,71,343,1,0,0,0,73,346,
  	1,0,0,0,75,349,1,0,0,0,77,353,1,0,0,0,79,356,1,0,0,0,81,359,1,0,0,0,83,
  	362,1,0,0,0,85,365,1,0,0,0,87,368,1,0,0,0,89,371,1,0,0,0,91,374,1,0,0,
  	0,93,377,1,0,0,0,95,380,1,0,0,0,97,382,1,0,0,0,99,384,1,0,0,0,101,386,
  	1,0,0,0,103,388,1,0,0,0,105,390,1,0,0,0,107,392,1,0,0,0,109,394,1,0,0,
  	0,111,396,1,0,0,0,113,398,1,0,0,0,115,400,1,0,0,0,117,402,1,0,0,0,119,
  	404,1,0,0,0,121,406,1,0,0,0,123,409,1,0,0,0,125,412,1,0,0,0,127,414,1,
  	0,0,0,129,417,1,0,0,0,131,419,1,0,0,0,133,422,1,0,0,0,135,425,1,0,0,0,
  	137,428,1,0,0,0,139,430,1,0,0,0,141,432,1,0,0,0,143,434,1,0,0,0,145,437,
  	1,0,0,0,147,439,1,0,0,0,149,441,1,0,0,0,151,443,1,0,0,0,153,445,1,0,0,
  	0,155,447,1,0,0,0,157,449,1,0,0,0,159,451,1,0,0,0,161,453,1,0,0,0,163,
  	455,1,0,0,0,165,457,1,0,0,0,167,459,1,0,0,0,169,461,1,0,0,0,171,463,1,
  	0,0,0,173,467,1,0,0,0,175,472,1,0,0,0,177,496,1,0,0,0,179,180,5,102,0,
  	0,180,181,5,110,0,0,181,2,1,0,0,0,182,183,5,108,0,0,183,184,5,101,0,0,
  	184,185,5,116,0,0,185,4,1,0,0,0,186,187,5,105,0,0,187,188,5,102,0,0,188,
  	6,1,0,0,0,189,190,5,117,0,0,190,191,5,110,0,0,191,192,5,108,0,0,192,193,
  	5,101,0,0,193,194,5,115,0,0,194,195,5,115,0,0,195,8,1,0,0,0,196,197,5,
  	101,0,0,197,198,5,108,0,0,198,199,5,115,0,0,199,200,5,101,0,0,200,10,
  	1,0,0,0,201,202,5,119,0,0,202,203,5,104,0,0,203,204,5,105,0,0,204,205,
  	5,108,0,0,205,206,5,101,0,0,206,12,1,0,0,0,207,208,5,117,0,0,208,209,
  	5,110,0,0,209,210,5,116,0,0,210,211,5,105,0,0,211,212,5,108,0,0,212,14,
  	1,0,0,0,213,214,5,102,0,0,214,215,5,111,0,0,215,216,5,114,0,0,216,16,
  	1,0,0,0,217,218,5,114,0,0,218,219,5,101,0,0,219,220,5,116,0,0,220,221,
  	5,117,0,0,221,222,5,114,0,0,222,223,5,110,0,0,223,18,1,0,0,0,224,225,
  	5,98,0,0,225,226,5,114,0,0,226,227,5,101,0,0,227,228,5,97,0,0,228,229,
  	5,107,0,0,229,20,1,0,0,0,230,231,5,110,0,0,231,232,5,101,0,0,232,233,
  	5,120,0,0,233,234,5,116,0,0,234,22,1,0,0,0,235,236,5,108,0,0,236,237,
  	5,97,0,0,237,238,5,115,0,0,238,239,5,116,0,0,239,24,1,0,0,0,240,241,5,
  	111,0,0,241,242,5,110,0,0,242,243,5,99,0,0,243,244,5,101,0,0,244,26,1,
  	0,0,0,245,246,5,126,0,0,246,247,5,62,0,0,247,28,1,0,0,0,248,249,5,92,
  	0,0,249,250,5,119,0,0,250,30,1,0,0,0,251,252,5,92,0,0,252,253,5,100,0,
  	0,253,32,1,0,0,0,254,255,5,92,0,0,255,256,5,115,0,0,256,34,1,0,0,0,257,
  	258,5,92,0,0,258,259,5,110,0,0,259,36,1,0,0,0,260,261,5,92,0,0,261,262,
  	5,47,0,0,262,38,1,0,0,0,263,264,5,114,0,0,264,265,5,101,0,0,265,266,5,
  	116,0,0,266,267,5,117,0,0,267,268,5,114,0,0,268,269,5,110,0,0,269,270,
  	5,32,0,0,270,271,5,97,0,0,271,272,5,108,0,0,272,273,5,108,0,0,273,40,
  	1,0,0,0,274,280,3,49,24,0,275,279,3,49,24,0,276,279,3,47,23,0,277,279,
  	3,137,68,0,278,275,1,0,0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,282,1,
  	0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,42,1,0,0,0,282,280,1,0,0,0,
  	283,285,5,95,0,0,284,286,3,41,20,0,285,284,1,0,0,0,285,286,1,0,0,0,286,
  	44,1,0,0,0,287,289,3,47,23,0,288,287,1,0,0,0,289,290,1,0,0,0,290,288,
  	1,0,0,0,290,291,1,0,0,0,291,298,1,0,0,0,292,294,5,46,0,0,293,295,3,47,
  	23,0,294,293,1,0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,
  	297,299,1,0,0,0,298,292,1,0,0,0,298,299,1,0,0,0,299,46,1,0,0,0,300,301,
  	7,0,0,0,301,48,1,0,0,0,302,304,3,51,25,0,303,302,1,0,0,0,304,305,1,0,
  	0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,50,1,0,0,0,307,310,3,53,26,0,
  	308,310,3,55,27,0,309,307,1,0,0,0,309,308,1,0,0,0,310,52,1,0,0,0,311,
  	312,7,1,0,0,312,54,1,0,0,0,313,314,7,2,0,0,314,56,1,0,0,0,315,316,5,116,
  	0,0,316,317,5,114,0,0,317,318,5,117,0,0,318,319,5,101,0,0,319,58,1,0,
  	0,0,320,321,5,102,0,0,321,322,5,97,0,0,322,323,5,108,0,0,323,324,5,115,
  	0,0,324,325,5,101,0,0,325,60,1,0,0,0,326,327,5,110,0,0,327,328,5,117,
  	0,0,328,329,5,108,0,0,329,330,5,108,0,0,330,62,1,0,0,0,331,332,5,92,0,
  	0,332,333,5,92,0,0,333,64,1,0,0,0,334,335,5,45,0,0,335,336,5,62,0,0,336,
  	66,1,0,0,0,337,338,5,61,0,0,338,339,5,62,0,0,339,68,1,0,0,0,340,341,5,
  	62,0,0,341,342,5,62,0,0,342,70,1,0,0,0,343,344,5,60,0,0,344,345,5,60,
  	0,0,345,72,1,0,0,0,346,347,5,46,0,0,347,348,5,46,0,0,348,74,1,0,0,0,349,
  	350,5,46,0,0,350,351,5,46,0,0,351,352,5,46,0,0,352,76,1,0,0,0,353,354,
  	5,97,0,0,354,355,5,115,0,0,355,78,1,0,0,0,356,357,5,43,0,0,357,358,5,
  	61,0,0,358,80,1,0,0,0,359,360,5,45,0,0,360,361,5,61,0,0,361,82,1,0,0,
  	0,362,363,5,42,0,0,363,364,5,61,0,0,364,84,1,0,0,0,365,366,5,47,0,0,366,
  	367,5,61,0,0,367,86,1,0,0,0,368,369,5,37,0,0,369,370,5,61,0,0,370,88,
  	1,0,0,0,371,372,5,94,0,0,372,373,5,61,0,0,373,90,1,0,0,0,374,375,5,43,
  	0,0,375,376,5,43,0,0,376,92,1,0,0,0,377,378,5,45,0,0,378,379,5,45,0,0,
  	379,94,1,0,0,0,380,381,5,91,0,0,381,96,1,0,0,0,382,383,5,93,0,0,383,98,
  	1,0,0,0,384,385,5,123,0,0,385,100,1,0,0,0,386,387,5,125,0,0,387,102,1,
  	0,0,0,388,389,5,40,0,0,389,104,1,0,0,0,390,391,5,41,0,0,391,106,1,0,0,
  	0,392,393,5,94,0,0,393,108,1,0,0,0,394,395,5,42,0,0,395,110,1,0,0,0,396,
  	397,5,47,0,0,397,112,1,0,0,0,398,399,5,37,0,0,399,114,1,0,0,0,400,401,
  	5,43,0,0,401,116,1,0,0,0,402,403,5,45,0,0,403,118,1,0,0,0,404,405,5,61,
  	0,0,405,120,1,0,0,0,406,407,5,61,0,0,407,408,5,61,0,0,408,122,1,0,0,0,
  	409,410,5,33,0,0,410,411,5,61,0,0,411,124,1,0,0,0,412,413,5,62,0,0,413,
  	126,1,0,0,0,414,415,5,62,0,0,415,416,5,61,0,0,416,128,1,0,0,0,417,418,
  	5,60,0,0,418,130,1,0,0,0,419,420,5,60,0,0,420,421,5,61,0,0,421,132,1,
  	0,0,0,422,423,5,38,0,0,423,424,5,38,0,0,424,134,1,0,0,0,425,426,5,124,
  	0,0,426,427,5,124,0,0,427,136,1,0,0,0,428,429,5,95,0,0,429,138,1,0,0,
  	0,430,431,5,38,0,0,431,140,1,0,0,0,432,433,5,36,0,0,433,142,1,0,0,0,434,
  	435,5,92,0,0,435,436,5,36,0,0,436,144,1,0,0,0,437,438,5,35,0,0,438,146,
  	1,0,0,0,439,440,5,64,0,0,440,148,1,0,0,0,441,442,5,33,0,0,442,150,1,0,
  	0,0,443,444,5,63,0,0,444,152,1,0,0,0,445,446,5,58,0,0,446,154,1,0,0,0,
  	447,448,5,59,0,0,448,156,1,0,0,0,449,450,5,92,0,0,450,158,1,0,0,0,451,
  	452,5,124,0,0,452,160,1,0,0,0,453,454,5,34,0,0,454,162,1,0,0,0,455,456,
  	5,39,0,0,456,164,1,0,0,0,457,458,5,44,0,0,458,166,1,0,0,0,459,460,5,46,
  	0,0,460,168,1,0,0,0,461,462,5,126,0,0,462,170,1,0,0,0,463,464,5,96,0,
  	0,464,172,1,0,0,0,465,468,3,177,88,0,466,468,3,175,87,0,467,465,1,0,0,
  	0,467,466,1,0,0,0,468,469,1,0,0,0,469,470,6,86,0,0,470,174,1,0,0,0,471,
  	473,7,3,0,0,472,471,1,0,0,0,473,474,1,0,0,0,474,472,1,0,0,0,474,475,1,
  	0,0,0,475,176,1,0,0,0,476,477,5,47,0,0,477,478,5,47,0,0,478,482,1,0,0,
  	0,479,481,8,4,0,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,
  	483,1,0,0,0,483,497,1,0,0,0,484,482,1,0,0,0,485,486,5,47,0,0,486,487,
  	5,42,0,0,487,491,1,0,0,0,488,490,9,0,0,0,489,488,1,0,0,0,490,493,1,0,
  	0,0,491,492,1,0,0,0,491,489,1,0,0,0,492,494,1,0,0,0,493,491,1,0,0,0,494,
  	495,5,42,0,0,495,497,5,47,0,0,496,476,1,0,0,0,496,485,1,0,0,0,497,178,
  	1,0,0,0,14,0,278,280,285,290,296,298,305,309,467,474,482,491,496,1,6,
  	0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  strawberrylexerLexerStaticData = staticData.release();
}

}

StrawberryLexer::StrawberryLexer(CharStream *input) : Lexer(input) {
  StrawberryLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *strawberrylexerLexerStaticData->atn, strawberrylexerLexerStaticData->decisionToDFA, strawberrylexerLexerStaticData->sharedContextCache);
}

StrawberryLexer::~StrawberryLexer() {
  delete _interpreter;
}

std::string StrawberryLexer::getGrammarFileName() const {
  return "StrawberryLexer.g4";
}

const std::vector<std::string>& StrawberryLexer::getRuleNames() const {
  return strawberrylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& StrawberryLexer::getChannelNames() const {
  return strawberrylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& StrawberryLexer::getModeNames() const {
  return strawberrylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& StrawberryLexer::getVocabulary() const {
  return strawberrylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView StrawberryLexer::getSerializedATN() const {
  return strawberrylexerLexerStaticData->serializedATN;
}

const atn::ATN& StrawberryLexer::getATN() const {
  return *strawberrylexerLexerStaticData->atn;
}




void StrawberryLexer::initialize() {
  ::antlr4::internal::call_once(strawberrylexerLexerOnceFlag, strawberrylexerLexerInitialize);
}
