
// Generated from /Users/patrickkennedy/Desktop/antlr4/StrawberryCpp/Strawberry/StrawberryLexer.g4 by ANTLR 4.12.0


#include "StrawberryLexer.h"


using namespace antlr4;

using namespace antlrcpptest;


using namespace antlr4;

namespace {

struct StrawberryLexerStaticData final {
  StrawberryLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  StrawberryLexerStaticData(const StrawberryLexerStaticData&) = delete;
  StrawberryLexerStaticData(StrawberryLexerStaticData&&) = delete;
  StrawberryLexerStaticData& operator=(const StrawberryLexerStaticData&) = delete;
  StrawberryLexerStaticData& operator=(StrawberryLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag strawberrylexerLexerOnceFlag;
StrawberryLexerStaticData *strawberrylexerLexerStaticData = nullptr;

void strawberrylexerLexerInitialize() {
  assert(strawberrylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<StrawberryLexerStaticData>(
    std::vector<std::string>{
      "Fn", "Decl", "If", "Unless", "Else", "While", "Until", "For", "Return", 
      "Break", "Next", "Last", "Once", "Id", "Number", "String", "LitString", 
      "Digit", "Word", "UcLetter", "LcLetter", "True", "False", "Null", 
      "DefOr", "Sarrow", "Darrpw", "LRarrow", "RLarrow", "Dot2", "Dot3", 
      "As", "Uscore", "AndSign", "Doll", "Hash", "At", "ExPoint", "Qmark", 
      "Colon", "Semi", "Fslash", "Bar", "Dquote", "Squote", "Com", "Dot", 
      "Squig", "Btick", "Pow", "Star", "Bslash", "Mod", "Plus", "Min", "Eq", 
      "BoolEq", "BoolNeq", "Gt", "GtEq", "Lt", "LtEq", "And", "Or", "PlusEq", 
      "MinEq", "MultEq", "DivEq", "ModEq", "PowEq", "Increm", "Decrem", 
      "Lbrack", "Rbrack", "Lbrace", "Rbrace", "Lpar", "Rpar", "Ignore", 
      "WS", "Comment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'fn'", "'let'", "'if'", "'unless'", "'else'", "'while'", "'until'", 
      "'for'", "'return'", "'break'", "'next'", "'last'", "'once'", "", 
      "", "", "", "", "", "", "", "'true'", "'false'", "'null'", "'\\\\'", 
      "'->'", "'=>'", "'>>'", "'<<'", "'..'", "'...'", "'as'", "'_'", "'&'", 
      "'$'", "'#'", "'@'", "'!'", "'\\u003F'", "':'", "';'", "'\\'", "'|'", 
      "'\"'", "'''", "','", "'.'", "'~'", "'`'", "'^'", "'*'", "'/'", "'%'", 
      "'+'", "'-'", "'='", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", 
      "'&&'", "'||'", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", "'++'", 
      "'--'", "'['", "']'", "'{'", "'}'", "'('", "')'"
    },
    std::vector<std::string>{
      "", "Fn", "Decl", "If", "Unless", "Else", "While", "Until", "For", 
      "Return", "Break", "Next", "Last", "Once", "Id", "Number", "String", 
      "LitString", "Digit", "Word", "UcLetter", "LcLetter", "True", "False", 
      "Null", "DefOr", "Sarrow", "Darrpw", "LRarrow", "RLarrow", "Dot2", 
      "Dot3", "As", "Uscore", "AndSign", "Doll", "Hash", "At", "ExPoint", 
      "Qmark", "Colon", "Semi", "Fslash", "Bar", "Dquote", "Squote", "Com", 
      "Dot", "Squig", "Btick", "Pow", "Star", "Bslash", "Mod", "Plus", "Min", 
      "Eq", "BoolEq", "BoolNeq", "Gt", "GtEq", "Lt", "LtEq", "And", "Or", 
      "PlusEq", "MinEq", "MultEq", "DivEq", "ModEq", "PowEq", "Increm", 
      "Decrem", "Lbrack", "Rbrack", "Lbrace", "Rbrace", "Lpar", "Rpar", 
      "Ignore"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,79,461,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,
  	2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
  	1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
  	8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
  	1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,5,13,234,8,13,
  	10,13,12,13,237,9,13,1,14,4,14,240,8,14,11,14,12,14,241,1,14,1,14,4,14,
  	246,8,14,11,14,12,14,247,3,14,250,8,14,1,15,1,15,5,15,254,8,15,10,15,
  	12,15,257,9,15,1,15,1,15,1,16,1,16,5,16,263,8,16,10,16,12,16,266,9,16,
  	1,16,1,16,1,17,1,17,1,18,1,18,4,18,274,8,18,11,18,12,18,275,1,19,1,19,
  	1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
  	1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,
  	1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,
  	1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
  	1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,
  	1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,
  	1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,
  	1,58,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,
  	1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,
  	1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,73,
  	1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,3,78,431,8,78,
  	1,78,1,78,1,79,4,79,436,8,79,11,79,12,79,437,1,80,1,80,1,80,1,80,5,80,
  	444,8,80,10,80,12,80,447,9,80,1,80,1,80,1,80,1,80,5,80,453,8,80,10,80,
  	12,80,456,9,80,1,80,1,80,3,80,460,8,80,3,255,264,454,0,81,1,1,3,2,5,3,
  	7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
  	33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
  	28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
  	79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
  	51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
  	61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,
  	71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,0,161,
  	0,1,0,5,1,0,48,57,1,0,65,90,1,0,97,122,3,0,9,10,13,13,32,32,2,0,10,10,
  	13,13,473,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
  	0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
  	1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
  	0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
  	0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
  	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
  	0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
  	0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
  	1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
  	0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
  	0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,
  	0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,
  	0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,
  	0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,
  	0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,
  	0,0,157,1,0,0,0,1,163,1,0,0,0,3,166,1,0,0,0,5,170,1,0,0,0,7,173,1,0,0,
  	0,9,180,1,0,0,0,11,185,1,0,0,0,13,191,1,0,0,0,15,197,1,0,0,0,17,201,1,
  	0,0,0,19,208,1,0,0,0,21,214,1,0,0,0,23,219,1,0,0,0,25,224,1,0,0,0,27,
  	229,1,0,0,0,29,239,1,0,0,0,31,251,1,0,0,0,33,260,1,0,0,0,35,269,1,0,0,
  	0,37,273,1,0,0,0,39,277,1,0,0,0,41,279,1,0,0,0,43,281,1,0,0,0,45,286,
  	1,0,0,0,47,292,1,0,0,0,49,297,1,0,0,0,51,300,1,0,0,0,53,303,1,0,0,0,55,
  	306,1,0,0,0,57,309,1,0,0,0,59,312,1,0,0,0,61,315,1,0,0,0,63,319,1,0,0,
  	0,65,322,1,0,0,0,67,324,1,0,0,0,69,326,1,0,0,0,71,328,1,0,0,0,73,330,
  	1,0,0,0,75,332,1,0,0,0,77,334,1,0,0,0,79,336,1,0,0,0,81,338,1,0,0,0,83,
  	340,1,0,0,0,85,342,1,0,0,0,87,344,1,0,0,0,89,346,1,0,0,0,91,348,1,0,0,
  	0,93,350,1,0,0,0,95,352,1,0,0,0,97,354,1,0,0,0,99,356,1,0,0,0,101,358,
  	1,0,0,0,103,360,1,0,0,0,105,362,1,0,0,0,107,364,1,0,0,0,109,366,1,0,0,
  	0,111,368,1,0,0,0,113,370,1,0,0,0,115,373,1,0,0,0,117,376,1,0,0,0,119,
  	378,1,0,0,0,121,381,1,0,0,0,123,383,1,0,0,0,125,386,1,0,0,0,127,389,1,
  	0,0,0,129,392,1,0,0,0,131,395,1,0,0,0,133,398,1,0,0,0,135,401,1,0,0,0,
  	137,404,1,0,0,0,139,407,1,0,0,0,141,410,1,0,0,0,143,413,1,0,0,0,145,416,
  	1,0,0,0,147,418,1,0,0,0,149,420,1,0,0,0,151,422,1,0,0,0,153,424,1,0,0,
  	0,155,426,1,0,0,0,157,430,1,0,0,0,159,435,1,0,0,0,161,459,1,0,0,0,163,
  	164,5,102,0,0,164,165,5,110,0,0,165,2,1,0,0,0,166,167,5,108,0,0,167,168,
  	5,101,0,0,168,169,5,116,0,0,169,4,1,0,0,0,170,171,5,105,0,0,171,172,5,
  	102,0,0,172,6,1,0,0,0,173,174,5,117,0,0,174,175,5,110,0,0,175,176,5,108,
  	0,0,176,177,5,101,0,0,177,178,5,115,0,0,178,179,5,115,0,0,179,8,1,0,0,
  	0,180,181,5,101,0,0,181,182,5,108,0,0,182,183,5,115,0,0,183,184,5,101,
  	0,0,184,10,1,0,0,0,185,186,5,119,0,0,186,187,5,104,0,0,187,188,5,105,
  	0,0,188,189,5,108,0,0,189,190,5,101,0,0,190,12,1,0,0,0,191,192,5,117,
  	0,0,192,193,5,110,0,0,193,194,5,116,0,0,194,195,5,105,0,0,195,196,5,108,
  	0,0,196,14,1,0,0,0,197,198,5,102,0,0,198,199,5,111,0,0,199,200,5,114,
  	0,0,200,16,1,0,0,0,201,202,5,114,0,0,202,203,5,101,0,0,203,204,5,116,
  	0,0,204,205,5,117,0,0,205,206,5,114,0,0,206,207,5,110,0,0,207,18,1,0,
  	0,0,208,209,5,98,0,0,209,210,5,114,0,0,210,211,5,101,0,0,211,212,5,97,
  	0,0,212,213,5,107,0,0,213,20,1,0,0,0,214,215,5,110,0,0,215,216,5,101,
  	0,0,216,217,5,120,0,0,217,218,5,116,0,0,218,22,1,0,0,0,219,220,5,108,
  	0,0,220,221,5,97,0,0,221,222,5,115,0,0,222,223,5,116,0,0,223,24,1,0,0,
  	0,224,225,5,111,0,0,225,226,5,110,0,0,226,227,5,99,0,0,227,228,5,101,
  	0,0,228,26,1,0,0,0,229,235,3,37,18,0,230,234,3,37,18,0,231,234,3,35,17,
  	0,232,234,3,65,32,0,233,230,1,0,0,0,233,231,1,0,0,0,233,232,1,0,0,0,234,
  	237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,28,1,0,0,0,237,235,1,
  	0,0,0,238,240,3,35,17,0,239,238,1,0,0,0,240,241,1,0,0,0,241,239,1,0,0,
  	0,241,242,1,0,0,0,242,249,1,0,0,0,243,245,5,46,0,0,244,246,3,35,17,0,
  	245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,250,
  	1,0,0,0,249,243,1,0,0,0,249,250,1,0,0,0,250,30,1,0,0,0,251,255,3,87,43,
  	0,252,254,9,0,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,256,1,0,0,0,255,
  	253,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,259,3,87,43,0,259,32,
  	1,0,0,0,260,264,3,89,44,0,261,263,9,0,0,0,262,261,1,0,0,0,263,266,1,0,
  	0,0,264,265,1,0,0,0,264,262,1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,
  	268,3,89,44,0,268,34,1,0,0,0,269,270,7,0,0,0,270,36,1,0,0,0,271,274,3,
  	39,19,0,272,274,3,41,20,0,273,271,1,0,0,0,273,272,1,0,0,0,274,275,1,0,
  	0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,38,1,0,0,0,277,278,7,1,0,0,278,
  	40,1,0,0,0,279,280,7,2,0,0,280,42,1,0,0,0,281,282,5,116,0,0,282,283,5,
  	114,0,0,283,284,5,117,0,0,284,285,5,101,0,0,285,44,1,0,0,0,286,287,5,
  	102,0,0,287,288,5,97,0,0,288,289,5,108,0,0,289,290,5,115,0,0,290,291,
  	5,101,0,0,291,46,1,0,0,0,292,293,5,110,0,0,293,294,5,117,0,0,294,295,
  	5,108,0,0,295,296,5,108,0,0,296,48,1,0,0,0,297,298,5,92,0,0,298,299,5,
  	92,0,0,299,50,1,0,0,0,300,301,5,45,0,0,301,302,5,62,0,0,302,52,1,0,0,
  	0,303,304,5,61,0,0,304,305,5,62,0,0,305,54,1,0,0,0,306,307,5,62,0,0,307,
  	308,5,62,0,0,308,56,1,0,0,0,309,310,5,60,0,0,310,311,5,60,0,0,311,58,
  	1,0,0,0,312,313,5,46,0,0,313,314,5,46,0,0,314,60,1,0,0,0,315,316,5,46,
  	0,0,316,317,5,46,0,0,317,318,5,46,0,0,318,62,1,0,0,0,319,320,5,97,0,0,
  	320,321,5,115,0,0,321,64,1,0,0,0,322,323,5,95,0,0,323,66,1,0,0,0,324,
  	325,5,38,0,0,325,68,1,0,0,0,326,327,5,36,0,0,327,70,1,0,0,0,328,329,5,
  	35,0,0,329,72,1,0,0,0,330,331,5,64,0,0,331,74,1,0,0,0,332,333,5,33,0,
  	0,333,76,1,0,0,0,334,335,5,63,0,0,335,78,1,0,0,0,336,337,5,58,0,0,337,
  	80,1,0,0,0,338,339,5,59,0,0,339,82,1,0,0,0,340,341,5,92,0,0,341,84,1,
  	0,0,0,342,343,5,124,0,0,343,86,1,0,0,0,344,345,5,34,0,0,345,88,1,0,0,
  	0,346,347,5,39,0,0,347,90,1,0,0,0,348,349,5,44,0,0,349,92,1,0,0,0,350,
  	351,5,46,0,0,351,94,1,0,0,0,352,353,5,126,0,0,353,96,1,0,0,0,354,355,
  	5,96,0,0,355,98,1,0,0,0,356,357,5,94,0,0,357,100,1,0,0,0,358,359,5,42,
  	0,0,359,102,1,0,0,0,360,361,5,47,0,0,361,104,1,0,0,0,362,363,5,37,0,0,
  	363,106,1,0,0,0,364,365,5,43,0,0,365,108,1,0,0,0,366,367,5,45,0,0,367,
  	110,1,0,0,0,368,369,5,61,0,0,369,112,1,0,0,0,370,371,5,61,0,0,371,372,
  	5,61,0,0,372,114,1,0,0,0,373,374,5,33,0,0,374,375,5,61,0,0,375,116,1,
  	0,0,0,376,377,5,62,0,0,377,118,1,0,0,0,378,379,5,62,0,0,379,380,5,61,
  	0,0,380,120,1,0,0,0,381,382,5,60,0,0,382,122,1,0,0,0,383,384,5,60,0,0,
  	384,385,5,61,0,0,385,124,1,0,0,0,386,387,5,38,0,0,387,388,5,38,0,0,388,
  	126,1,0,0,0,389,390,5,124,0,0,390,391,5,124,0,0,391,128,1,0,0,0,392,393,
  	5,43,0,0,393,394,5,61,0,0,394,130,1,0,0,0,395,396,5,45,0,0,396,397,5,
  	61,0,0,397,132,1,0,0,0,398,399,5,42,0,0,399,400,5,61,0,0,400,134,1,0,
  	0,0,401,402,5,47,0,0,402,403,5,61,0,0,403,136,1,0,0,0,404,405,5,37,0,
  	0,405,406,5,61,0,0,406,138,1,0,0,0,407,408,5,94,0,0,408,409,5,61,0,0,
  	409,140,1,0,0,0,410,411,5,43,0,0,411,412,5,43,0,0,412,142,1,0,0,0,413,
  	414,5,45,0,0,414,415,5,45,0,0,415,144,1,0,0,0,416,417,5,91,0,0,417,146,
  	1,0,0,0,418,419,5,93,0,0,419,148,1,0,0,0,420,421,5,123,0,0,421,150,1,
  	0,0,0,422,423,5,125,0,0,423,152,1,0,0,0,424,425,5,40,0,0,425,154,1,0,
  	0,0,426,427,5,41,0,0,427,156,1,0,0,0,428,431,3,161,80,0,429,431,3,159,
  	79,0,430,428,1,0,0,0,430,429,1,0,0,0,431,432,1,0,0,0,432,433,6,78,0,0,
  	433,158,1,0,0,0,434,436,7,3,0,0,435,434,1,0,0,0,436,437,1,0,0,0,437,435,
  	1,0,0,0,437,438,1,0,0,0,438,160,1,0,0,0,439,440,5,47,0,0,440,441,5,47,
  	0,0,441,445,1,0,0,0,442,444,8,4,0,0,443,442,1,0,0,0,444,447,1,0,0,0,445,
  	443,1,0,0,0,445,446,1,0,0,0,446,460,1,0,0,0,447,445,1,0,0,0,448,449,5,
  	47,0,0,449,450,5,42,0,0,450,454,1,0,0,0,451,453,9,0,0,0,452,451,1,0,0,
  	0,453,456,1,0,0,0,454,455,1,0,0,0,454,452,1,0,0,0,455,457,1,0,0,0,456,
  	454,1,0,0,0,457,458,5,42,0,0,458,460,5,47,0,0,459,439,1,0,0,0,459,448,
  	1,0,0,0,460,162,1,0,0,0,15,0,233,235,241,247,249,255,264,273,275,430,
  	437,445,454,459,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  strawberrylexerLexerStaticData = staticData.release();
}

}

StrawberryLexer::StrawberryLexer(CharStream *input) : Lexer(input) {
  StrawberryLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *strawberrylexerLexerStaticData->atn, strawberrylexerLexerStaticData->decisionToDFA, strawberrylexerLexerStaticData->sharedContextCache);
}

StrawberryLexer::~StrawberryLexer() {
  delete _interpreter;
}

std::string StrawberryLexer::getGrammarFileName() const {
  return "StrawberryLexer.g4";
}

const std::vector<std::string>& StrawberryLexer::getRuleNames() const {
  return strawberrylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& StrawberryLexer::getChannelNames() const {
  return strawberrylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& StrawberryLexer::getModeNames() const {
  return strawberrylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& StrawberryLexer::getVocabulary() const {
  return strawberrylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView StrawberryLexer::getSerializedATN() const {
  return strawberrylexerLexerStaticData->serializedATN;
}

const atn::ATN& StrawberryLexer::getATN() const {
  return *strawberrylexerLexerStaticData->atn;
}




void StrawberryLexer::initialize() {
  ::antlr4::internal::call_once(strawberrylexerLexerOnceFlag, strawberrylexerLexerInitialize);
}
