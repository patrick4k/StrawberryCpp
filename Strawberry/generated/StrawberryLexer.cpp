
// Generated from C:/Users/Patrick/Documents/Code/StrawberryParent/Strawberry/StrawberryLexer.g4 by ANTLR 4.12.0


#include "StrawberryLexer.h"


using namespace antlr4;

using namespace antlrcpptest;


using namespace antlr4;

namespace {

struct StrawberryLexerStaticData final {
  StrawberryLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  StrawberryLexerStaticData(const StrawberryLexerStaticData&) = delete;
  StrawberryLexerStaticData(StrawberryLexerStaticData&&) = delete;
  StrawberryLexerStaticData& operator=(const StrawberryLexerStaticData&) = delete;
  StrawberryLexerStaticData& operator=(StrawberryLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag strawberrylexerLexerOnceFlag;
StrawberryLexerStaticData *strawberrylexerLexerStaticData = nullptr;

void strawberrylexerLexerInitialize() {
  assert(strawberrylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<StrawberryLexerStaticData>(
    std::vector<std::string>{
      "Fn", "Decl", "If", "Unless", "Else", "While", "Until", "For", "Return", 
      "Break", "Next", "Last", "Once", "MatchArrow", "RegWord", "RegDigit", 
      "RegSpace", "RegNewline", "RegFSlash", "RegReturnAll", "Id", "DefId", 
      "Number", "String", "StringLit", "Digit", "Word", "Letter", "UcLetter", 
      "LcLetter", "True", "False", "Null", "DefOr", "Sarrow", "Darrow", 
      "LRarrow", "RLarrow", "Dot2", "Dot3", "As", "PlusEq", "MinEq", "MultEq", 
      "DivEq", "ModEq", "PowEq", "Increm", "Decrem", "Lbrack", "Rbrack", 
      "Lbrace", "Rbrace", "Lpar", "Rpar", "Pow", "Star", "Bslash", "Mod", 
      "Plus", "Min", "Eq", "BoolEq", "BoolNeq", "Gt", "GtEq", "Lt", "LtEq", 
      "And", "Or", "Uscore", "AndSign", "Doll", "DollLit", "Hash", "At", 
      "ExPoint", "Qmark", "Colon", "Semi", "Fslash", "Bar", "Dquote", "Squote", 
      "Com", "Dot", "Squig", "Btick", "Ignore", "WS", "RETURN", "Comment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'fn'", "'let'", "'if'", "'unless'", "'else'", "'while'", "'until'", 
      "'for'", "'return'", "'break'", "'next'", "'last'", "'once'", "'~>'", 
      "'\\w'", "'\\d'", "'\\s'", "'\\n'", "'\\/'", "'return all'", "", "", 
      "", "", "", "", "", "", "", "", "'true'", "'false'", "'null'", "'\\\\'", 
      "'->'", "'=>'", "'>>'", "'<<'", "'..'", "'...'", "'as'", "'+='", "'-='", 
      "'*='", "'/='", "'%='", "'^='", "'++'", "'--'", "'['", "']'", "'{'", 
      "'}'", "'('", "')'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'='", 
      "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'&&'", "'||'", "'_'", 
      "'&'", "'$'", "'\\$'", "'#'", "'@'", "'!'", "'\\u003F'", "':'", "';'", 
      "'\\'", "'|'", "'\"'", "'''", "','", "'.'", "'~'", "'`'"
    },
    std::vector<std::string>{
      "", "Fn", "Decl", "If", "Unless", "Else", "While", "Until", "For", 
      "Return", "Break", "Next", "Last", "Once", "MatchArrow", "RegWord", 
      "RegDigit", "RegSpace", "RegNewline", "RegFSlash", "RegReturnAll", 
      "Id", "DefId", "Number", "String", "StringLit", "Digit", "Word", "Letter", 
      "UcLetter", "LcLetter", "True", "False", "Null", "DefOr", "Sarrow", 
      "Darrow", "LRarrow", "RLarrow", "Dot2", "Dot3", "As", "PlusEq", "MinEq", 
      "MultEq", "DivEq", "ModEq", "PowEq", "Increm", "Decrem", "Lbrack", 
      "Rbrack", "Lbrace", "Rbrace", "Lpar", "Rpar", "Pow", "Star", "Bslash", 
      "Mod", "Plus", "Min", "Eq", "BoolEq", "BoolNeq", "Gt", "GtEq", "Lt", 
      "LtEq", "And", "Or", "Uscore", "AndSign", "Doll", "DollLit", "Hash", 
      "At", "ExPoint", "Qmark", "Colon", "Semi", "Fslash", "Bar", "Dquote", 
      "Squote", "Com", "Dot", "Squig", "Btick", "Ignore", "WS", "RETURN"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,91,536,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
  	6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
  	1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
  	1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,
  	1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,20,1,20,1,20,1,20,5,20,285,8,20,10,20,12,20,288,9,20,1,21,
  	1,21,3,21,292,8,21,1,22,4,22,295,8,22,11,22,12,22,296,1,22,1,22,4,22,
  	301,8,22,11,22,12,22,302,3,22,305,8,22,1,22,1,22,4,22,309,8,22,11,22,
  	12,22,310,3,22,313,8,22,1,23,1,23,5,23,317,8,23,10,23,12,23,320,9,23,
  	1,23,1,23,1,24,1,24,5,24,326,8,24,10,24,12,24,329,9,24,1,24,1,24,1,25,
  	1,25,1,26,4,26,336,8,26,11,26,12,26,337,1,27,1,27,3,27,342,8,27,1,28,
  	1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,
  	1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,
  	1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,
  	1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,
  	1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,
  	1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,63,
  	1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,68,1,68,
  	1,68,1,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,73,1,74,
  	1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,
  	1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,
  	1,88,1,88,3,88,501,8,88,1,88,1,88,1,89,4,89,506,8,89,11,89,12,89,507,
  	1,90,4,90,511,8,90,11,90,12,90,512,1,91,1,91,1,91,1,91,5,91,519,8,91,
  	10,91,12,91,522,9,91,1,91,1,91,1,91,1,91,5,91,528,8,91,10,91,12,91,531,
  	9,91,1,91,1,91,3,91,535,8,91,3,318,327,529,0,92,1,1,3,2,5,3,7,4,9,5,11,
  	6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
  	83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
  	53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
  	63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,
  	73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,
  	83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,181,91,183,0,1,0,
  	5,1,0,48,57,1,0,65,90,1,0,97,122,2,0,9,9,32,32,2,0,10,10,13,13,554,0,
  	1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
  	0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
  	23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
  	0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
  	0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
  	55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
  	0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
  	0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
  	87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,
  	0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
  	0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
  	0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,
  	0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,
  	0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,
  	0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,
  	0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,
  	0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,
  	0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,1,185,1,0,0,0,3,188,1,0,0,0,5,192,1,
  	0,0,0,7,195,1,0,0,0,9,202,1,0,0,0,11,207,1,0,0,0,13,213,1,0,0,0,15,219,
  	1,0,0,0,17,223,1,0,0,0,19,230,1,0,0,0,21,236,1,0,0,0,23,241,1,0,0,0,25,
  	246,1,0,0,0,27,251,1,0,0,0,29,254,1,0,0,0,31,257,1,0,0,0,33,260,1,0,0,
  	0,35,263,1,0,0,0,37,266,1,0,0,0,39,269,1,0,0,0,41,280,1,0,0,0,43,289,
  	1,0,0,0,45,312,1,0,0,0,47,314,1,0,0,0,49,323,1,0,0,0,51,332,1,0,0,0,53,
  	335,1,0,0,0,55,341,1,0,0,0,57,343,1,0,0,0,59,345,1,0,0,0,61,347,1,0,0,
  	0,63,352,1,0,0,0,65,358,1,0,0,0,67,363,1,0,0,0,69,366,1,0,0,0,71,369,
  	1,0,0,0,73,372,1,0,0,0,75,375,1,0,0,0,77,378,1,0,0,0,79,381,1,0,0,0,81,
  	385,1,0,0,0,83,388,1,0,0,0,85,391,1,0,0,0,87,394,1,0,0,0,89,397,1,0,0,
  	0,91,400,1,0,0,0,93,403,1,0,0,0,95,406,1,0,0,0,97,409,1,0,0,0,99,412,
  	1,0,0,0,101,414,1,0,0,0,103,416,1,0,0,0,105,418,1,0,0,0,107,420,1,0,0,
  	0,109,422,1,0,0,0,111,424,1,0,0,0,113,426,1,0,0,0,115,428,1,0,0,0,117,
  	430,1,0,0,0,119,432,1,0,0,0,121,434,1,0,0,0,123,436,1,0,0,0,125,438,1,
  	0,0,0,127,441,1,0,0,0,129,444,1,0,0,0,131,446,1,0,0,0,133,449,1,0,0,0,
  	135,451,1,0,0,0,137,454,1,0,0,0,139,457,1,0,0,0,141,460,1,0,0,0,143,462,
  	1,0,0,0,145,464,1,0,0,0,147,466,1,0,0,0,149,469,1,0,0,0,151,471,1,0,0,
  	0,153,473,1,0,0,0,155,475,1,0,0,0,157,477,1,0,0,0,159,479,1,0,0,0,161,
  	481,1,0,0,0,163,483,1,0,0,0,165,485,1,0,0,0,167,487,1,0,0,0,169,489,1,
  	0,0,0,171,491,1,0,0,0,173,493,1,0,0,0,175,495,1,0,0,0,177,500,1,0,0,0,
  	179,505,1,0,0,0,181,510,1,0,0,0,183,534,1,0,0,0,185,186,5,102,0,0,186,
  	187,5,110,0,0,187,2,1,0,0,0,188,189,5,108,0,0,189,190,5,101,0,0,190,191,
  	5,116,0,0,191,4,1,0,0,0,192,193,5,105,0,0,193,194,5,102,0,0,194,6,1,0,
  	0,0,195,196,5,117,0,0,196,197,5,110,0,0,197,198,5,108,0,0,198,199,5,101,
  	0,0,199,200,5,115,0,0,200,201,5,115,0,0,201,8,1,0,0,0,202,203,5,101,0,
  	0,203,204,5,108,0,0,204,205,5,115,0,0,205,206,5,101,0,0,206,10,1,0,0,
  	0,207,208,5,119,0,0,208,209,5,104,0,0,209,210,5,105,0,0,210,211,5,108,
  	0,0,211,212,5,101,0,0,212,12,1,0,0,0,213,214,5,117,0,0,214,215,5,110,
  	0,0,215,216,5,116,0,0,216,217,5,105,0,0,217,218,5,108,0,0,218,14,1,0,
  	0,0,219,220,5,102,0,0,220,221,5,111,0,0,221,222,5,114,0,0,222,16,1,0,
  	0,0,223,224,5,114,0,0,224,225,5,101,0,0,225,226,5,116,0,0,226,227,5,117,
  	0,0,227,228,5,114,0,0,228,229,5,110,0,0,229,18,1,0,0,0,230,231,5,98,0,
  	0,231,232,5,114,0,0,232,233,5,101,0,0,233,234,5,97,0,0,234,235,5,107,
  	0,0,235,20,1,0,0,0,236,237,5,110,0,0,237,238,5,101,0,0,238,239,5,120,
  	0,0,239,240,5,116,0,0,240,22,1,0,0,0,241,242,5,108,0,0,242,243,5,97,0,
  	0,243,244,5,115,0,0,244,245,5,116,0,0,245,24,1,0,0,0,246,247,5,111,0,
  	0,247,248,5,110,0,0,248,249,5,99,0,0,249,250,5,101,0,0,250,26,1,0,0,0,
  	251,252,5,126,0,0,252,253,5,62,0,0,253,28,1,0,0,0,254,255,5,92,0,0,255,
  	256,5,119,0,0,256,30,1,0,0,0,257,258,5,92,0,0,258,259,5,100,0,0,259,32,
  	1,0,0,0,260,261,5,92,0,0,261,262,5,115,0,0,262,34,1,0,0,0,263,264,5,92,
  	0,0,264,265,5,110,0,0,265,36,1,0,0,0,266,267,5,92,0,0,267,268,5,47,0,
  	0,268,38,1,0,0,0,269,270,5,114,0,0,270,271,5,101,0,0,271,272,5,116,0,
  	0,272,273,5,117,0,0,273,274,5,114,0,0,274,275,5,110,0,0,275,276,5,32,
  	0,0,276,277,5,97,0,0,277,278,5,108,0,0,278,279,5,108,0,0,279,40,1,0,0,
  	0,280,286,3,53,26,0,281,285,3,53,26,0,282,285,3,51,25,0,283,285,3,141,
  	70,0,284,281,1,0,0,0,284,282,1,0,0,0,284,283,1,0,0,0,285,288,1,0,0,0,
  	286,284,1,0,0,0,286,287,1,0,0,0,287,42,1,0,0,0,288,286,1,0,0,0,289,291,
  	5,95,0,0,290,292,3,41,20,0,291,290,1,0,0,0,291,292,1,0,0,0,292,44,1,0,
  	0,0,293,295,3,51,25,0,294,293,1,0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,
  	296,297,1,0,0,0,297,304,1,0,0,0,298,300,5,46,0,0,299,301,3,51,25,0,300,
  	299,1,0,0,0,301,302,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,305,1,
  	0,0,0,304,298,1,0,0,0,304,305,1,0,0,0,305,313,1,0,0,0,306,308,5,46,0,
  	0,307,309,3,51,25,0,308,307,1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,0,310,
  	311,1,0,0,0,311,313,1,0,0,0,312,294,1,0,0,0,312,306,1,0,0,0,313,46,1,
  	0,0,0,314,318,5,34,0,0,315,317,9,0,0,0,316,315,1,0,0,0,317,320,1,0,0,
  	0,318,319,1,0,0,0,318,316,1,0,0,0,319,321,1,0,0,0,320,318,1,0,0,0,321,
  	322,5,34,0,0,322,48,1,0,0,0,323,327,5,39,0,0,324,326,9,0,0,0,325,324,
  	1,0,0,0,326,329,1,0,0,0,327,328,1,0,0,0,327,325,1,0,0,0,328,330,1,0,0,
  	0,329,327,1,0,0,0,330,331,5,39,0,0,331,50,1,0,0,0,332,333,7,0,0,0,333,
  	52,1,0,0,0,334,336,3,55,27,0,335,334,1,0,0,0,336,337,1,0,0,0,337,335,
  	1,0,0,0,337,338,1,0,0,0,338,54,1,0,0,0,339,342,3,57,28,0,340,342,3,59,
  	29,0,341,339,1,0,0,0,341,340,1,0,0,0,342,56,1,0,0,0,343,344,7,1,0,0,344,
  	58,1,0,0,0,345,346,7,2,0,0,346,60,1,0,0,0,347,348,5,116,0,0,348,349,5,
  	114,0,0,349,350,5,117,0,0,350,351,5,101,0,0,351,62,1,0,0,0,352,353,5,
  	102,0,0,353,354,5,97,0,0,354,355,5,108,0,0,355,356,5,115,0,0,356,357,
  	5,101,0,0,357,64,1,0,0,0,358,359,5,110,0,0,359,360,5,117,0,0,360,361,
  	5,108,0,0,361,362,5,108,0,0,362,66,1,0,0,0,363,364,5,92,0,0,364,365,5,
  	92,0,0,365,68,1,0,0,0,366,367,5,45,0,0,367,368,5,62,0,0,368,70,1,0,0,
  	0,369,370,5,61,0,0,370,371,5,62,0,0,371,72,1,0,0,0,372,373,5,62,0,0,373,
  	374,5,62,0,0,374,74,1,0,0,0,375,376,5,60,0,0,376,377,5,60,0,0,377,76,
  	1,0,0,0,378,379,5,46,0,0,379,380,5,46,0,0,380,78,1,0,0,0,381,382,5,46,
  	0,0,382,383,5,46,0,0,383,384,5,46,0,0,384,80,1,0,0,0,385,386,5,97,0,0,
  	386,387,5,115,0,0,387,82,1,0,0,0,388,389,5,43,0,0,389,390,5,61,0,0,390,
  	84,1,0,0,0,391,392,5,45,0,0,392,393,5,61,0,0,393,86,1,0,0,0,394,395,5,
  	42,0,0,395,396,5,61,0,0,396,88,1,0,0,0,397,398,5,47,0,0,398,399,5,61,
  	0,0,399,90,1,0,0,0,400,401,5,37,0,0,401,402,5,61,0,0,402,92,1,0,0,0,403,
  	404,5,94,0,0,404,405,5,61,0,0,405,94,1,0,0,0,406,407,5,43,0,0,407,408,
  	5,43,0,0,408,96,1,0,0,0,409,410,5,45,0,0,410,411,5,45,0,0,411,98,1,0,
  	0,0,412,413,5,91,0,0,413,100,1,0,0,0,414,415,5,93,0,0,415,102,1,0,0,0,
  	416,417,5,123,0,0,417,104,1,0,0,0,418,419,5,125,0,0,419,106,1,0,0,0,420,
  	421,5,40,0,0,421,108,1,0,0,0,422,423,5,41,0,0,423,110,1,0,0,0,424,425,
  	5,94,0,0,425,112,1,0,0,0,426,427,5,42,0,0,427,114,1,0,0,0,428,429,5,47,
  	0,0,429,116,1,0,0,0,430,431,5,37,0,0,431,118,1,0,0,0,432,433,5,43,0,0,
  	433,120,1,0,0,0,434,435,5,45,0,0,435,122,1,0,0,0,436,437,5,61,0,0,437,
  	124,1,0,0,0,438,439,5,61,0,0,439,440,5,61,0,0,440,126,1,0,0,0,441,442,
  	5,33,0,0,442,443,5,61,0,0,443,128,1,0,0,0,444,445,5,62,0,0,445,130,1,
  	0,0,0,446,447,5,62,0,0,447,448,5,61,0,0,448,132,1,0,0,0,449,450,5,60,
  	0,0,450,134,1,0,0,0,451,452,5,60,0,0,452,453,5,61,0,0,453,136,1,0,0,0,
  	454,455,5,38,0,0,455,456,5,38,0,0,456,138,1,0,0,0,457,458,5,124,0,0,458,
  	459,5,124,0,0,459,140,1,0,0,0,460,461,5,95,0,0,461,142,1,0,0,0,462,463,
  	5,38,0,0,463,144,1,0,0,0,464,465,5,36,0,0,465,146,1,0,0,0,466,467,5,92,
  	0,0,467,468,5,36,0,0,468,148,1,0,0,0,469,470,5,35,0,0,470,150,1,0,0,0,
  	471,472,5,64,0,0,472,152,1,0,0,0,473,474,5,33,0,0,474,154,1,0,0,0,475,
  	476,5,63,0,0,476,156,1,0,0,0,477,478,5,58,0,0,478,158,1,0,0,0,479,480,
  	5,59,0,0,480,160,1,0,0,0,481,482,5,92,0,0,482,162,1,0,0,0,483,484,5,124,
  	0,0,484,164,1,0,0,0,485,486,5,34,0,0,486,166,1,0,0,0,487,488,5,39,0,0,
  	488,168,1,0,0,0,489,490,5,44,0,0,490,170,1,0,0,0,491,492,5,46,0,0,492,
  	172,1,0,0,0,493,494,5,126,0,0,494,174,1,0,0,0,495,496,5,96,0,0,496,176,
  	1,0,0,0,497,501,3,183,91,0,498,501,3,179,89,0,499,501,3,181,90,0,500,
  	497,1,0,0,0,500,498,1,0,0,0,500,499,1,0,0,0,501,502,1,0,0,0,502,503,6,
  	88,0,0,503,178,1,0,0,0,504,506,7,3,0,0,505,504,1,0,0,0,506,507,1,0,0,
  	0,507,505,1,0,0,0,507,508,1,0,0,0,508,180,1,0,0,0,509,511,7,4,0,0,510,
  	509,1,0,0,0,511,512,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,182,1,
  	0,0,0,514,515,5,47,0,0,515,516,5,47,0,0,516,520,1,0,0,0,517,519,8,4,0,
  	0,518,517,1,0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,
  	535,1,0,0,0,522,520,1,0,0,0,523,524,5,47,0,0,524,525,5,42,0,0,525,529,
  	1,0,0,0,526,528,9,0,0,0,527,526,1,0,0,0,528,531,1,0,0,0,529,530,1,0,0,
  	0,529,527,1,0,0,0,530,532,1,0,0,0,531,529,1,0,0,0,532,533,5,42,0,0,533,
  	535,5,47,0,0,534,514,1,0,0,0,534,523,1,0,0,0,535,184,1,0,0,0,19,0,284,
  	286,291,296,302,304,310,312,318,327,337,341,500,507,512,520,529,534,1,
  	6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  strawberrylexerLexerStaticData = staticData.release();
}

}

StrawberryLexer::StrawberryLexer(CharStream *input) : Lexer(input) {
  StrawberryLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *strawberrylexerLexerStaticData->atn, strawberrylexerLexerStaticData->decisionToDFA, strawberrylexerLexerStaticData->sharedContextCache);
}

StrawberryLexer::~StrawberryLexer() {
  delete _interpreter;
}

std::string StrawberryLexer::getGrammarFileName() const {
  return "StrawberryLexer.g4";
}

const std::vector<std::string>& StrawberryLexer::getRuleNames() const {
  return strawberrylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& StrawberryLexer::getChannelNames() const {
  return strawberrylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& StrawberryLexer::getModeNames() const {
  return strawberrylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& StrawberryLexer::getVocabulary() const {
  return strawberrylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView StrawberryLexer::getSerializedATN() const {
  return strawberrylexerLexerStaticData->serializedATN;
}

const atn::ATN& StrawberryLexer::getATN() const {
  return *strawberrylexerLexerStaticData->atn;
}




void StrawberryLexer::initialize() {
  ::antlr4::internal::call_once(strawberrylexerLexerOnceFlag, strawberrylexerLexerInitialize);
}
