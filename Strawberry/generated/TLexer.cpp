
// Generated from /home/patrick/Documents/Interpreters/StrawberryCpp/Strawberry/StrawberryLexer.g4 by ANTLR 4.12.0


#include "TLexer.h"


using namespace antlr4;

using namespace antlrcpptest;


using namespace antlr4;

namespace {

struct TLexerStaticData final {
  TLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TLexerStaticData(const TLexerStaticData&) = delete;
  TLexerStaticData(TLexerStaticData&&) = delete;
  TLexerStaticData& operator=(const TLexerStaticData&) = delete;
  TLexerStaticData& operator=(TLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag tlexerLexerOnceFlag;
TLexerStaticData *tlexerLexerStaticData = nullptr;

void tlexerLexerInitialize() {
  assert(tlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<TLexerStaticData>(
    std::vector<std::string>{
      "Id", "Number", "String", "LitString", "Digit", "Word", "UcLetter", 
      "LcLetter", "Sarrow", "Darrpw", "LRarrow", "RLarrow", "Dot2", "Dot3", 
      "As", "Nl", "Uscore", "AndSign", "Doll", "Hash", "At", "ExPoint", 
      "Qmark", "Colon", "Semi", "Fslash", "Bar", "Dquote", "Squote", "Com", 
      "Dot", "Squig", "Btick", "Pow", "Star", "Bslash", "Mod", "Plus", "Min", 
      "SEq", "DEq", "Gt", "GtEq", "Lt", "LtEq", "And", "Or", "PlusEq", "MinEq", 
      "MultEq", "DivEq", "ModEq", "PowEq", "Lbrack", "Rbrack", "Lbrace", 
      "Rbrace", "Lpar", "Rpar", "Ignore", "WS", "Comment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "'->'", "'=>'", "'>>'", "'<<'", 
      "'..'", "'...'", "'as'", "", "'_'", "'&'", "'$'", "'#'", "'@'", "'!'", 
      "'\\u003F'", "':'", "';'", "'\\'", "'|'", "'\"'", "'''", "','", "'.'", 
      "'~'", "'`'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'=='", 
      "'>'", "'>='", "'<'", "'<='", "'and'", "'or'", "'+='", "'-='", "'*='", 
      "'/='", "'%='", "'^='", "'['", "']'", "'{'", "'}'", "'('", "')'"
    },
    std::vector<std::string>{
      "", "Id", "Number", "String", "LitString", "Digit", "Word", "UcLetter", 
      "LcLetter", "Sarrow", "Darrpw", "LRarrow", "RLarrow", "Dot2", "Dot3", 
      "As", "Nl", "Uscore", "AndSign", "Doll", "Hash", "At", "ExPoint", 
      "Qmark", "Colon", "Semi", "Fslash", "Bar", "Dquote", "Squote", "Com", 
      "Dot", "Squig", "Btick", "Pow", "Star", "Bslash", "Mod", "Plus", "Min", 
      "SEq", "DEq", "Gt", "GtEq", "Lt", "LtEq", "And", "Or", "PlusEq", "MinEq", 
      "MultEq", "DivEq", "ModEq", "PowEq", "Lbrack", "Rbrack", "Lbrace", 
      "Rbrace", "Lpar", "Rpar", "Ignore"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,60,335,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,1,
  	0,5,0,130,8,0,10,0,12,0,133,9,0,1,1,4,1,136,8,1,11,1,12,1,137,1,1,1,1,
  	4,1,142,8,1,11,1,12,1,143,3,1,146,8,1,1,2,1,2,5,2,150,8,2,10,2,12,2,153,
  	9,2,1,2,1,2,1,3,1,3,5,3,159,8,3,10,3,12,3,162,9,3,1,3,1,3,1,4,1,4,1,5,
  	1,5,4,5,170,8,5,11,5,12,5,171,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,
  	1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,
  	1,14,1,14,1,15,4,15,201,8,15,11,15,12,15,202,1,16,1,16,1,17,1,17,1,18,
  	1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
  	1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
  	1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,
  	1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,44,
  	1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,
  	1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,54,
  	1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,3,59,305,8,59,
  	1,59,1,59,1,60,4,60,310,8,60,11,60,12,60,311,1,61,1,61,1,61,1,61,5,61,
  	318,8,61,10,61,12,61,321,9,61,1,61,1,61,1,61,1,61,5,61,327,8,61,10,61,
  	12,61,330,9,61,1,61,1,61,3,61,334,8,61,3,151,160,328,0,62,1,1,3,2,5,3,
  	7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
  	33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
  	28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
  	79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
  	51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
  	0,123,0,1,0,5,1,0,48,57,1,0,65,90,1,0,97,122,2,0,10,10,13,13,2,0,9,9,
  	32,32,348,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
  	0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
  	1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
  	0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
  	0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
  	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
  	0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
  	0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
  	1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
  	0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
  	0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,
  	0,0,117,1,0,0,0,0,119,1,0,0,0,1,125,1,0,0,0,3,135,1,0,0,0,5,147,1,0,0,
  	0,7,156,1,0,0,0,9,165,1,0,0,0,11,169,1,0,0,0,13,173,1,0,0,0,15,175,1,
  	0,0,0,17,177,1,0,0,0,19,180,1,0,0,0,21,183,1,0,0,0,23,186,1,0,0,0,25,
  	189,1,0,0,0,27,192,1,0,0,0,29,196,1,0,0,0,31,200,1,0,0,0,33,204,1,0,0,
  	0,35,206,1,0,0,0,37,208,1,0,0,0,39,210,1,0,0,0,41,212,1,0,0,0,43,214,
  	1,0,0,0,45,216,1,0,0,0,47,218,1,0,0,0,49,220,1,0,0,0,51,222,1,0,0,0,53,
  	224,1,0,0,0,55,226,1,0,0,0,57,228,1,0,0,0,59,230,1,0,0,0,61,232,1,0,0,
  	0,63,234,1,0,0,0,65,236,1,0,0,0,67,238,1,0,0,0,69,240,1,0,0,0,71,242,
  	1,0,0,0,73,244,1,0,0,0,75,246,1,0,0,0,77,248,1,0,0,0,79,250,1,0,0,0,81,
  	252,1,0,0,0,83,255,1,0,0,0,85,257,1,0,0,0,87,260,1,0,0,0,89,262,1,0,0,
  	0,91,265,1,0,0,0,93,269,1,0,0,0,95,272,1,0,0,0,97,275,1,0,0,0,99,278,
  	1,0,0,0,101,281,1,0,0,0,103,284,1,0,0,0,105,287,1,0,0,0,107,290,1,0,0,
  	0,109,292,1,0,0,0,111,294,1,0,0,0,113,296,1,0,0,0,115,298,1,0,0,0,117,
  	300,1,0,0,0,119,304,1,0,0,0,121,309,1,0,0,0,123,333,1,0,0,0,125,131,3,
  	11,5,0,126,130,3,11,5,0,127,130,3,9,4,0,128,130,3,33,16,0,129,126,1,0,
  	0,0,129,127,1,0,0,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,
  	132,1,0,0,0,132,2,1,0,0,0,133,131,1,0,0,0,134,136,3,9,4,0,135,134,1,0,
  	0,0,136,137,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,145,1,0,0,0,139,
  	141,5,46,0,0,140,142,3,9,4,0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,
  	1,0,0,0,143,144,1,0,0,0,144,146,1,0,0,0,145,139,1,0,0,0,145,146,1,0,0,
  	0,146,4,1,0,0,0,147,151,3,55,27,0,148,150,9,0,0,0,149,148,1,0,0,0,150,
  	153,1,0,0,0,151,152,1,0,0,0,151,149,1,0,0,0,152,154,1,0,0,0,153,151,1,
  	0,0,0,154,155,3,55,27,0,155,6,1,0,0,0,156,160,3,57,28,0,157,159,9,0,0,
  	0,158,157,1,0,0,0,159,162,1,0,0,0,160,161,1,0,0,0,160,158,1,0,0,0,161,
  	163,1,0,0,0,162,160,1,0,0,0,163,164,3,57,28,0,164,8,1,0,0,0,165,166,7,
  	0,0,0,166,10,1,0,0,0,167,170,3,13,6,0,168,170,3,15,7,0,169,167,1,0,0,
  	0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,
  	12,1,0,0,0,173,174,7,1,0,0,174,14,1,0,0,0,175,176,7,2,0,0,176,16,1,0,
  	0,0,177,178,5,45,0,0,178,179,5,62,0,0,179,18,1,0,0,0,180,181,5,61,0,0,
  	181,182,5,62,0,0,182,20,1,0,0,0,183,184,5,62,0,0,184,185,5,62,0,0,185,
  	22,1,0,0,0,186,187,5,60,0,0,187,188,5,60,0,0,188,24,1,0,0,0,189,190,5,
  	46,0,0,190,191,5,46,0,0,191,26,1,0,0,0,192,193,5,46,0,0,193,194,5,46,
  	0,0,194,195,5,46,0,0,195,28,1,0,0,0,196,197,5,97,0,0,197,198,5,115,0,
  	0,198,30,1,0,0,0,199,201,7,3,0,0,200,199,1,0,0,0,201,202,1,0,0,0,202,
  	200,1,0,0,0,202,203,1,0,0,0,203,32,1,0,0,0,204,205,5,95,0,0,205,34,1,
  	0,0,0,206,207,5,38,0,0,207,36,1,0,0,0,208,209,5,36,0,0,209,38,1,0,0,0,
  	210,211,5,35,0,0,211,40,1,0,0,0,212,213,5,64,0,0,213,42,1,0,0,0,214,215,
  	5,33,0,0,215,44,1,0,0,0,216,217,5,63,0,0,217,46,1,0,0,0,218,219,5,58,
  	0,0,219,48,1,0,0,0,220,221,5,59,0,0,221,50,1,0,0,0,222,223,5,92,0,0,223,
  	52,1,0,0,0,224,225,5,124,0,0,225,54,1,0,0,0,226,227,5,34,0,0,227,56,1,
  	0,0,0,228,229,5,39,0,0,229,58,1,0,0,0,230,231,5,44,0,0,231,60,1,0,0,0,
  	232,233,5,46,0,0,233,62,1,0,0,0,234,235,5,126,0,0,235,64,1,0,0,0,236,
  	237,5,96,0,0,237,66,1,0,0,0,238,239,5,94,0,0,239,68,1,0,0,0,240,241,5,
  	42,0,0,241,70,1,0,0,0,242,243,5,47,0,0,243,72,1,0,0,0,244,245,5,37,0,
  	0,245,74,1,0,0,0,246,247,5,43,0,0,247,76,1,0,0,0,248,249,5,45,0,0,249,
  	78,1,0,0,0,250,251,5,61,0,0,251,80,1,0,0,0,252,253,5,61,0,0,253,254,5,
  	61,0,0,254,82,1,0,0,0,255,256,5,62,0,0,256,84,1,0,0,0,257,258,5,62,0,
  	0,258,259,5,61,0,0,259,86,1,0,0,0,260,261,5,60,0,0,261,88,1,0,0,0,262,
  	263,5,60,0,0,263,264,5,61,0,0,264,90,1,0,0,0,265,266,5,97,0,0,266,267,
  	5,110,0,0,267,268,5,100,0,0,268,92,1,0,0,0,269,270,5,111,0,0,270,271,
  	5,114,0,0,271,94,1,0,0,0,272,273,5,43,0,0,273,274,5,61,0,0,274,96,1,0,
  	0,0,275,276,5,45,0,0,276,277,5,61,0,0,277,98,1,0,0,0,278,279,5,42,0,0,
  	279,280,5,61,0,0,280,100,1,0,0,0,281,282,5,47,0,0,282,283,5,61,0,0,283,
  	102,1,0,0,0,284,285,5,37,0,0,285,286,5,61,0,0,286,104,1,0,0,0,287,288,
  	5,94,0,0,288,289,5,61,0,0,289,106,1,0,0,0,290,291,5,91,0,0,291,108,1,
  	0,0,0,292,293,5,93,0,0,293,110,1,0,0,0,294,295,5,123,0,0,295,112,1,0,
  	0,0,296,297,5,125,0,0,297,114,1,0,0,0,298,299,5,40,0,0,299,116,1,0,0,
  	0,300,301,5,41,0,0,301,118,1,0,0,0,302,305,3,123,61,0,303,305,3,121,60,
  	0,304,302,1,0,0,0,304,303,1,0,0,0,305,306,1,0,0,0,306,307,6,59,0,0,307,
  	120,1,0,0,0,308,310,7,4,0,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,1,
  	0,0,0,311,312,1,0,0,0,312,122,1,0,0,0,313,314,5,47,0,0,314,315,5,47,0,
  	0,315,319,1,0,0,0,316,318,8,3,0,0,317,316,1,0,0,0,318,321,1,0,0,0,319,
  	317,1,0,0,0,319,320,1,0,0,0,320,334,1,0,0,0,321,319,1,0,0,0,322,323,5,
  	47,0,0,323,324,5,42,0,0,324,328,1,0,0,0,325,327,9,0,0,0,326,325,1,0,0,
  	0,327,330,1,0,0,0,328,329,1,0,0,0,328,326,1,0,0,0,329,331,1,0,0,0,330,
  	328,1,0,0,0,331,332,5,42,0,0,332,334,5,47,0,0,333,313,1,0,0,0,333,322,
  	1,0,0,0,334,124,1,0,0,0,16,0,129,131,137,143,145,151,160,169,171,202,
  	304,311,319,328,333,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  tlexerLexerStaticData = staticData.release();
}

}

TLexer::TLexer(CharStream *input) : Lexer(input) {
  TLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *tlexerLexerStaticData->atn, tlexerLexerStaticData->decisionToDFA, tlexerLexerStaticData->sharedContextCache);
}

TLexer::~TLexer() {
  delete _interpreter;
}

std::string TLexer::getGrammarFileName() const {
  return "StrawberryLexer.g4";
}

const std::vector<std::string>& TLexer::getRuleNames() const {
  return tlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TLexer::getChannelNames() const {
  return tlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TLexer::getModeNames() const {
  return tlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TLexer::getVocabulary() const {
  return tlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TLexer::getSerializedATN() const {
  return tlexerLexerStaticData->serializedATN;
}

const atn::ATN& TLexer::getATN() const {
  return *tlexerLexerStaticData->atn;
}




void TLexer::initialize() {
  ::antlr4::internal::call_once(tlexerLexerOnceFlag, tlexerLexerInitialize);
}
